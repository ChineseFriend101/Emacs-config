#+TITLE:Zacks Emacs Config
:PROPERTIES:
#+AUTHOR: Zachary DeGidio
#+PROPERTY: header-args :tangle init.el
#+STARTUP: overview
:END:
* TABLE OF CONTENTS :toc:
- [[#package-manager][Package Manager]]
- [[#evil-mode][EVIL Mode]]
  - [[#main-evil][Main EVIL]]
  - [[#evil-org][EVIL Org]]
- [[#key-bindings][KEY BINDINGS]]
  - [[#general-keybindings][General Keybindings]]
  - [[#hydra][Hydra]]
  - [[#which-key][Which-Key]]
- [[#rice][RICE]]
  - [[#fonts][Fonts]]
  - [[#all-the-icons][All The Icons]]
  - [[#themes][Themes]]
  - [[#zooming-inout][Zooming In/Out]]
  - [[#buffer-move][Buffer Move]]
  - [[#rainbow-mode][Rainbow Mode]]
  - [[#dashboard][Dashboard]]
- [[#org-mode][ORG MODE]]
  - [[#basic-org-stuff][Basic Org Stuff]]
  - [[#org-tempo][Org Tempo]]
  - [[#enabling-table-of-contents][Enabling Table of Contents]]
  - [[#org-roam][Org Roam]]
  - [[#enabling-org-bullets][Enabling Org Bullets]]
  - [[#disable-electric-indent][Disable Electric Indent]]
- [[#gui-tweaks][GUI TWEAKS]]
  - [[#disables-menubar-and-scrollbar][Disables Menubar and Scrollbar]]
  - [[#displays-line-numbers-and-truncated-lines][Displays Line Numbers and Truncated Lines]]
  - [[#doom-modeline][Doom modeline]]
- [[#ivy][IVY]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#eshell][Eshell]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm-toggle]]
- [[#sudo-edit][SUDO EDIT]]
- [[#helpful][HELPFUL]]
- [[#coding][CODING]]
  - [[#smartparens][Smartparens]]
  - [[#magit][Magit]]
  - [[#projectile][Projectile]]
- [[#version-control][VERSION CONTROL]]
  - [[#backups][Backups]]
  - [[#autosaves][Autosaves]]

* Package Manager
#+begin_src emacs-lisp
  (require 'elpaca "~/.config/emacs/elpaca.el")
#+end_src
* EVIL Mode
** Main EVIL
#+begin_src emacs-lisp
      ;; Expands to: (elpaca evil (use-package evil :demand t))
  (use-package evil
      :init ;; tweak evil's configuration before loading it
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t) ;;maybe change this
    (setq evil-split-window-below t)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))
  (use-package evil-collection
  :after evil
  :config
  (setq evil-collection-mode-list '(dashboard dired ibuffer))
  (evil-collection-init))
  (use-package evil-tutor)

#+end_src
** EVIL Org
#+begin_src emacs-lisp
(use-package evil-org
  :diminish evil-org-mode
  :after org
  :config
  (add-hook 'org-mode-hook 'evil-org-mode)
  (add-hook 'evil-org-mode-hook
            (lambda () (evil-org-set-key-theme))))

  ;;(require 'evil-org-agenda)
  ;;(evil-org-agenda-set-keys)
#+end_src

* KEY BINDINGS
** General Keybindings
#+begin_src emacs-lisp

  (use-package general
    :config
    (general-evil-setup)

  ;; set up 'spc' as the global leader key
  (general-create-definer zd/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "SPC" ;; set leader
    :global-prefix "C-SPC") ;; access leader in insert mode

  (zd/leader-keys
    "f" '(:ignore t :wk "Find")
    "f f" '(counsel-find-file :wk "Find file")
    "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
    "f r" '(counsel-recentf :wk "Find recent files"))

  (zd/leader-keys
    "b" '(:ignore t :wk "Buffer")
    "b b" '(switch-to-buffer :wk "Switch buffer")
    "b k" '(kill-this-buffer :wk "Kill this buffer")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
    "b i" '(counsel-ibuffer :wk "Ibuffer"))

  (zd/leader-keys
    "o" '(:ignore t :wk "Org")
    "o a" '(org-agenda :wk "Org agenda")
    "o t" '((lambda () (interactive) (find-file "~/org/tasks.org")) :wk "Org Tasks")
    "o r i" '(org-roam-node-insert :wk "Org Roam insert")
    "o r f" '(org-roam-node-find :wk "Org Roam find")
    "o r b" '(org-roam-buffer-toggle :wk "Org Roam buffer")
    "o r u" '(org-roam-ui-open :wk "Org Roam UI"))

   (zd/leader-keys
     "e" '(:ignore t :wk "Eval")    
     "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
     "e d" '(eval-defun :wk "Evaluate defun containing or after point")
     "e e" '(eval-expression :wk "Evaluate an elisp expression")
     "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
     "e r" '(eval-region :wk "Evaluate elisp in region"))

   (zd/leader-keys
     "E" '(:ignore t :wk "Eshell")
     "E h" '(counsel-esh-history :wk "Eshell history")
     "E s" '(eshell :wk "Eshell"))

   (zd/leader-keys
     "h" '(:ignore t :wk "Help")
     "h f" '(describe-function :wk "Describe function")
     "h v" '(describe-variable :wk "Describe variable"))

     ;; Makes ESC quit prompts
     (global-set-key (kbd "<escape>") 'keyboard-escape-quit)


   (zd/leader-keys
     "t" '(:ignore t :wk "Toggle")
     "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
     "t t" '(visual-line-mode :wk "Toggle truncated lines")
     "t v" '(vterm-toggle :wk "Toggle vterm"))

   (zd/leader-keys
     "w" '(:ignore t :wk "Windows")
     ;; Window splits
     "w c" '(evil-window-delete :wk "Close window")
     "w n" '(evil-window-new :wk "New window")
     "w s" '(evil-window-split :wk "Horizontal split window")
     "w v" '(evil-window-vsplit :wk "Vertical split window")
     ;; Window motions
     "w h" '(evil-window-left :wk "Window left")
     "w j" '(evil-window-down :wk "Window down")
     "w k" '(evil-window-up :wk "Window up")
     "w l" '(evil-window-right :wk "Window right")
     "w w" '(evil-window-next :wk "Go to next window")
     ;; Move Windows
     "w H" '(buf-move-left :wk "Buffer move left")
     "w J" '(buf-move-down :wk "Buffer move down")
     "w K" '(buf-move-up :wk "Buffer move up")
     "w L" '(buf-move-right :wk "Buffer move right"))
    )

#+end_src

** Hydra
#+begin_src emacs-lisp
  (use-package hydra)
  ;; For setting up quick cycle keybind
#+end_src

** Which-Key
#+begin_src emacs-lisp
  (use-package which-key
    :init
      (which-key-mode 1)
    :config
    (setq
          which-key-idle-delay 0.8))
#+end_src

* RICE
** Fonts
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
    :font "JetBrains Mono"
    :height 110
    :weight 'medium)
  (set-face-attribute 'variable-pitch nil
    :font "Ubuntu"
    :height 120
    :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
    :font "JetBrains Mono"
    :height 110
    :weight 'medium)
  ;; Makes commented text and keywords italics.
  ;; Only works in emacsclient not emacs.
  ;; You gotta have an italic face available.
  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)
  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)

  ;; This sets the defaoult font on all graphical frames created after restarting Emacs
  ;; Does the same as 'set-face-attribute default' above
  ;;but fonts on emacsclient don't work without this
  (add-to-list 'default-frame-alist '(font . "JetBrains Mono-11")) ;; Just line spacing (setq-default line-spacing 0.12) #+end_src
#+end_src

** All The Icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

** Themes
#+begin_src emacs-lisp
  (use-package doom-themes
    :init (load-theme 'doom-gruvbox t))
#+end_src

** Zooming In/Out
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

** Buffer Move
#+begin_src emacs-lisp
(require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))
#+end_src

** Rainbow Mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :hook org-mode prog-mode)
#+end_src

** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
  (setq dashboard-icon-type 'all-the-icons)) ;; use `all-the-icons' package
#+end_src
* ORG MODE
** Basic Org Stuff
#+begin_src emacs-lisp
  (setq org-agenda-files '("~/org/tasks.org"))
  (setq org-agenda-start-with-log-mode t)
  (setq org-log-done 'time)
  (setq org-log-into-drawer t)

  (setq org-refile-targets
    '(("archive.org" :maxlevel . 1)
      ("tasks.org" :maxlevel . 1)))

  ;; Saves Org buffers after refiling
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
#+end_src

** Org Tempo
#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

** Enabling Table of Contents
#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Org Roam
#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory "~/org/RoamNotes")
    :config
    (org-roam-setup))
  
  (use-package org-roam-ui
    :after org-roam
    :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src

** Enabling Org Bullets
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Disable Electric Indent
#+begin_src emacs-lisp
(electric-indent-mode -1)
#+end_src

* GUI TWEAKS
** Disables Menubar and Scrollbar
#+begin_src emacs-lisp
  (menu-bar-mode -1) ;; Disables menubar
  (tool-bar-mode -1) ;; Disables toolbar
  (scroll-bar-mode -1) ;; Disables scrollbar
  (set-fringe-mode -1) 
  (setq inhibit-startup-message t) ;; Disables the startup message
#+end_src
** Displays Line Numbers and Truncated Lines
#+begin_src emacs-lisp
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)

 ;; Disables line numbers for shell and term mode
  (dolist (mode '(term-mode-hook shell-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0)))) 
#+end_src

** Doom modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1)
    :custom (mode-line-height 10))
#+end_src

* IVY
#+begin_src emacs-lisp
   (use-package counsel
     :after ivy
     :bind ("M-x" . counsel-M-x)

     :config (counsel-mode)
     (setq ivy-initial-inputs-alist nil))

   (use-package ivy
          :bind (("C-s" . swiper)
          :map ivy-minibuffer-map
          ("TAB" . ivy-alt-done)
          ("C-l" . ivy-alt-done)
          ("C-j" . ivy-next-line)
          ("C-k" . ivy-previous-line)
          :map ivy-switch-buffer-map
          ("C-k" . ivy-previous-line)
          ("C-l" . ivy-done)
          ("C-d" . ivy-switch-buffer-kill)
          :map ivy-reverse-i-search-map
          ("C-k" . ivy-previous-line)
          ("C-d" . ivy-reverse-i-search-kill)
          ("C-c C-r" . ivy-resume)
          ("C-x B" . ivy-switch-buffer-other-window))

     :custom 
     (setq ivy-use-virtual-buffers t)
     (setq ivy-count-format "(%d/%d) ")
     :config
     (ivy-mode))

   (use-package all-the-icons-ivy-rich
     :ensure t
     :init (all-the-icons-ivy-rich-mode 1))
   (use-package ivy-rich
     :after ivy
     :ensure t
     :init (ivy-rich-mode 1)
     :custom
     (ivy-virtual-abbreviate 'full
      ivy-rich-switch-buffer-align-virtual-buffer t
      ivy-rich-path-style 'abbrev)
     :config
     (ivy-set-display-transformer 'ivy-switch-buffer
                                  'ivy-rich-switch-buffer-transformer))
#+end_src

* SHELLS AND TERMINALS
** Eshell
#+begin_src emacs-lisp
(use-package eshell-syntax-highlighting
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode +1))

;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
;; eshell-aliases-file -- sets an aliases file for the eshell.
  
(setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
      eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src
** Vterm
#+begin_src emacs-lisp
  (use-package vterm
  :config
  (setq shell-file-name "/bin/bash"
        vterm-max-scrollback 5000))
#+end_src
** Vterm-toggle
#+begin_src emacs-lisp
(use-package vterm-toggle
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.3))))
#+end_src

* SUDO EDIT
#+begin_src emacs-lisp
(use-package sudo-edit
  :config
    (zd/leader-keys
      "fu" '(sudo-edit-find-file :wk "Sudo find file")
      "fU" '(sudo-edit :wk "Sudo edit file")))

#+end_src
* HELPFUL
#+begin_src emacs-lisp
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

* CODING
** Smartparens
#+begin_src emacs-lisp
(use-package smartparens
  :diminish smartparens-mode
  :defer 1
  :config
  ;; Load default smartparens rules for various languages
  (require 'smartparens-config)
  (setq sp-max-prefix-length 25)
  (setq sp-max-pair-length 4)
  (setq sp-highlight-pair-overlay nil
        sp-highlight-wrap-overlay nil
        sp-highlight-wrap-tag-overlay nil)

  (with-eval-after-load 'evil
    (setq sp-show-pair-from-inside t)
    (setq sp-cancel-autoskip-on-backward-movement nil)
    (setq sp-pair-overlay-keymap (make-sparse-keymap)))

  (let ((unless-list '(sp-point-before-word-p
                       sp-point-after-word-p
                       sp-point-before-same-p)))
    (sp-pair "'"  nil :unless unless-list)
    (sp-pair "\"" nil :unless unless-list))

  ;; In lisps ( should open a new form if before another parenthesis
  (sp-local-pair sp-lisp-modes "(" ")" :unless '(:rem sp-point-before-same-p))

  ;; Don't do square-bracket space-expansion where it doesn't make sense to
  (sp-local-pair '(emacs-lisp-mode org-mode markdown-mode gfm-mode)
                 "[" nil :post-handlers '(:rem ("| " "SPC")))


  (dolist (brace '("(" "{" "["))
    (sp-pair brace nil
             :post-handlers '(("||\n[i]" "RET") ("| " "SPC"))
             ;; Don't autopair opening braces if before a word character or
             ;; other opening brace. The rationale: it interferes with manual
             ;; balancing of braces, and is odd form to have s-exps with no
             ;; whitespace in between, e.g. ()()(). Insert whitespace if
             ;; genuinely want to start a new form in the middle of a word.
             :unless '(sp-point-before-word-p sp-point-before-same-p)))
  (smartparens-global-mode t))
#+end_src

** Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :after evil
    :init
    (evil-collection-init))

  (use-package forge)
  ;; Need to authenicate throught GitHub
  
(use-package sqlite3)

#+end_src
** Projectile
#+begin_src emacs-lisp
  (use-package projectile
      :diminish projectile-mode
      :custom ((projectile-completion-system 'ivy))
      :config (projectile-mode)
      :bind-keymap
      ("C-c p" . projectile-command-map)
      :init
      (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
      (setq projectile-switch-project-action #'projectile-dired))
  
  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+end_src

* VERSION CONTROL
** Backups
#+begin_src emacs-lisp
;;(setq backup-directory-alist '(("." . ,(exan-file-name "tmp/backups/" user-emacs-directory))))
#+end_src
** Autosaves
#+begin_src emacs-lisp
;;(setq auto-save-list-file-prefix (expand-file-name "tmp/autosaves/sessions/" user-emacs-directory))

;;(setq auto-save-file-name-transforms (("." ,(expand-file-name "tmp/autosaves/" user-emacs-directory) t)))
#+end_src
